{"title":"Wails中Go结构或方法无法映射到前端","uid":"e7e13627a554d1367d86ca0e77896cef","slug":"2025-07-18-12","date":"2025-07-18T15:04:34.000Z","updated":"2025-07-19T06:06:33.409Z","comments":true,"path":"api/articles/2025-07-18-12.json","keywords":null,"cover":null,"content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>最近发现一个奇怪的问题，我执行<code>wails dev</code>时突然发现我在<code>app.go</code>中暴露给前端的函数居然没能自动绑定到前端的<code>wailsjs/go/apps/xxx</code>下。</p>\n<p>经过一段时间排查发现是 go 语言导出函数的返回值带有复杂类型，就是<code>time.Time</code>这个类型导致的，原因很简单。</p>\n<p>执行命令尝试手动让他去绑定：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wails generate module</span><br></pre></td></tr></table></figure>\n\n<p>然后出现了错误</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">╭─hyhacct@hyhacctdeMacBook-Air ~/workspace/PeachDRAC/PeachDRAC ‹main●›</span><br><span class=\"line\">╰─$ wails generate module                                                                                                                  1 ↵</span><br><span class=\"line\">2025/04/24 13:24:14 KnownStructs: model.TablePass       model.WailsCommunicate</span><br><span class=\"line\">Not found: time.Time</span><br><span class=\"line\">KnownStructs: model.TablePass   model.WailsCommunicate</span><br><span class=\"line\">Not found: time.Time</span><br><span class=\"line\"></span><br><span class=\"line\"> ♥   If Wails is useful to you or your company, please consider sponsoring the project:</span><br></pre></td></tr></table></figure>\n\n<p>这里就是在说 wails 其实并不支持<code>time.Time</code>这个类型，但是恰好我暴露的函数中，有一个返回值是结构体，结构体里面有个值类型就是<code>time.Time</code>。</p>\n<p>然后这个问题就顺其而然的产生了…</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>直接在对应的结构体这个类型下，给他添加一个映射: <code>ts_type:&quot;string&quot;</code></p>\n<p>意思就是告诉 Wails 将 <code>time.Time</code> 序列化为字符串，不将他作为一个特殊类型处理，其实就可以了。</p>\n<p>具体示例：(在对应的特殊类型后面添加<code>ts_type</code>映射)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> TablePass <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID        <span class=\"type\">int</span>       <span class=\"string\">`gorm:&quot;primary_key&quot; json:&quot;id&quot;`</span></span><br><span class=\"line\">\tUsername  <span class=\"type\">string</span>    <span class=\"string\">`gorm:&quot;not null&quot; json:&quot;username&quot;`</span></span><br><span class=\"line\">\tPassword  <span class=\"type\">string</span>    <span class=\"string\">`gorm:&quot;not null&quot; json:&quot;password&quot;`</span></span><br><span class=\"line\">\tPort      <span class=\"type\">string</span>    <span class=\"string\">`gorm:&quot;not null&quot; json:&quot;port&quot;`</span></span><br><span class=\"line\">\tStatus    <span class=\"type\">bool</span>      <span class=\"string\">`gorm:&quot;not null&quot; json:&quot;status&quot;`</span>   <span class=\"comment\">// 是否启用</span></span><br><span class=\"line\">\tPriority  <span class=\"type\">int</span>       <span class=\"string\">`gorm:&quot;not null&quot; json:&quot;priority&quot;`</span> <span class=\"comment\">// 优先级,数字越大越高</span></span><br><span class=\"line\">\tCreatedAt time.Time <span class=\"string\">`gorm:&quot;autoCreateTime&quot; json:&quot;created_at&quot; ts_type:&quot;string&quot;`</span></span><br><span class=\"line\">\tUpdatedAt time.Time <span class=\"string\">`gorm:&quot;autoUpdateTime&quot; json:&quot;updated_at&quot; ts_type:&quot;string&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后执行自动绑定，发现没有任何错误，OK，问题顺利解决。</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">╭─hyhacct@hyhacctdeMacBook-Air ~/workspace/PeachDRAC/PeachDRAC ‹main●›</span><br><span class=\"line\">╰─$ wails generate module</span><br><span class=\"line\"> ♥   If Wails is useful to you or your company, please consider sponsoring the project:</span><br><span class=\"line\">https://github.com/sponsors/leaanthony</span><br><span class=\"line\">╭─hyhacct@hyhacctdeMacBook-Air ~/workspace/PeachDRAC/PeachDRAC ‹main●›</span><br><span class=\"line\">╰─$</span><br></pre></td></tr></table></figure>\n","text":"概述最近发现一个奇怪的问题，我执行wails dev时突然发现我在app.go中暴露给前端的函数居然没能自动绑定到前端的wailsjs/go/apps/xxx下...","permalink":"/post/2025-07-18-12","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Go","slug":"Go","count":3,"path":"api/categories/Go.json"}],"tags":[{"name":"Go Wails","slug":"Go-Wails","count":1,"path":"api/tags/Go-Wails.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\"><span class=\"toc-text\">解决办法</span></a></li></ol>","author":{"name":"Reverse","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"每一次的突破，都是自我超越的见证。","socials":{"github":"https://github.com/hyhacct","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"使用Vue实现瀑布流布局","uid":"2a7ed2ed5e24b574ac1497b2e3f1a5af","slug":"2025-07-18-13","date":"2025-07-18T15:06:23.000Z","updated":"2025-07-19T06:06:33.409Z","comments":true,"path":"api/articles/2025-07-18-13.json","keywords":null,"cover":null,"text":"概述瀑布流布局相比栅格网格不同的就是，只要卡片塞的合理，一般是不会出现空格。 不像栅格，只能做水平对齐，但是如果卡片的高度不能统一，那就会出现很多空白的区域，影...","permalink":"/post/2025-07-18-13","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Vue.js","slug":"Vue-js","count":3,"path":"api/categories/Vue-js.json"}],"tags":[{"name":"Vue.js","slug":"Vue-js","count":2,"path":"api/tags/Vue-js.json"}],"author":{"name":"Reverse","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"每一次的突破，都是自我超越的见证。","socials":{"github":"https://github.com/hyhacct","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"强制更新Gorm零值","uid":"87e97009ba513578bced279cc7705d0d","slug":"2025-07-18-11","date":"2025-07-18T14:59:24.000Z","updated":"2025-07-19T06:06:33.409Z","comments":true,"path":"api/articles/2025-07-18-11.json","keywords":null,"cover":"/images/cover/gorm_1.svg","text":"概述在使用 Gorm 的Updates方法更新字段时，一般情况下他会忽略掉零值，例如 false、0、\"\"，这些都属于零值 如果你有个字段叫status，类型为...","permalink":"/post/2025-07-18-11","photos":[],"count_time":{"symbolsCount":430,"symbolsTime":"1 mins."},"categories":[{"name":"Go","slug":"Go","count":3,"path":"api/categories/Go.json"}],"tags":[{"name":"Go Gorm","slug":"Go-Gorm","count":1,"path":"api/tags/Go-Gorm.json"}],"author":{"name":"Reverse","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"每一次的突破，都是自我超越的见证。","socials":{"github":"https://github.com/hyhacct","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}