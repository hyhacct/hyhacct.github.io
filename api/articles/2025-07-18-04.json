{"title":"使用Go从Chroom中获取页面Cookies","uid":"1c2170fb6fef60f29c3c2770dcf97c19","slug":"2025-07-18-04","date":"2025-07-18T13:59:31.000Z","updated":"2025-07-18T10:00:53.309Z","comments":true,"path":"api/articles/2025-07-18-04.json","keywords":null,"cover":null,"content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>浅浅的玩一下<code>github.com/go-rod/rod</code>这个库.</p>\n<p>通过这个支持库,可以很方便的打开一个浏览器并且让他访问一个 url,在他访问 url 时你还可以监听这个 url 的 cookies.</p>\n<h2 id=\"开始实操\"><a href=\"#开始实操\" class=\"headerlink\" title=\"开始实操\"></a>开始实操</h2><p>为了防止被检测到自动化，我这里是注入了 js 屏蔽了检测。</p>\n<ol>\n<li>首先使用<code>browser.MustPage(&quot;&quot;)</code>打开了一个空的标签页。</li>\n<li>注入 JS 脚本修改<code>navigator.webdriver</code>为<code>false</code>。</li>\n<li>注入修改完成后再打开真实的目标 URL，这样目标网站就没法通过这个值去检测我是不是自动化程序了。</li>\n<li>同时滑块成功后页面会自动跳转到其他地方，所以我做了一个拦截，如果不需要的话可以直接删除。</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>可能要注意下，不一定所有的站点都是通过<code>webdriver</code>来检测自动化程序的，但是我这里只提供这个方式，至于其他的需要按照实际场景来看。</p>\n<p>并且我这里 go 程序只是为了获取滑块后的 cookies，如果想获取请求头或者其他东西的话，可能得自己再研究下。</p></blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log/slog&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/go-rod/rod&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/go-rod/rod/lib/launcher&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/go-rod/rod/lib/proto&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  url := <span class=\"string\">&quot;https://qq.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tu := launcher.New().</span><br><span class=\"line\">\t\tHeadless(<span class=\"literal\">false</span>). <span class=\"comment\">// 显示窗口</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置窗口尺寸（可选）</span></span><br><span class=\"line\">\t\tSet(<span class=\"string\">&quot;window-size&quot;</span>, <span class=\"string\">&quot;1200,800&quot;</span>).</span><br><span class=\"line\">\t\tSet(<span class=\"string\">&quot;disable-blink-features&quot;</span>, <span class=\"string\">&quot;AutomationControlled&quot;</span>).</span><br><span class=\"line\">\t\tMustLaunch()</span><br><span class=\"line\"></span><br><span class=\"line\">\tbrowser := rod.New().ControlURL(u).MustConnect()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打开页面</span></span><br><span class=\"line\">\tpage := browser.MustPage(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 在页面加载前注入 JavaScript，修改 navigator.webdriver</span></span><br><span class=\"line\">\t_, err := page.EvalOnNewDocument(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t\tObject.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tget: () =&gt; false</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;);</span></span><br><span class=\"line\"><span class=\"string\">\t`</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tslog.Error(<span class=\"string\">&quot;在页面加载前注入 JavaScript，修改 navigator.webdriver失败&quot;</span>, <span class=\"string\">&quot;ProxyService&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 访问目标页面</span></span><br><span class=\"line\">\tpage.MustNavigate(url).MustWaitLoad()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 拦截导航请求，禁止跳转</span></span><br><span class=\"line\">\trouter := page.HijackRequests()</span><br><span class=\"line\">\trouter.MustAdd(<span class=\"string\">&quot;*&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx *rod.Hijack)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果请求是导航（即页面跳转），阻止它</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ctx.Request.Type() == proto.NetworkResourceTypeDocument &amp;&amp; ctx.Request.URL().String() != url &#123;</span><br><span class=\"line\">\t\t\tslog.Info(<span class=\"string\">&quot;阻止页面跳转&quot;</span>, <span class=\"string\">&quot;ProxyService&quot;</span>, ctx.Request.URL())</span><br><span class=\"line\">\t\t\tctx.Response.Fail(proto.NetworkErrorReasonAborted)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tctx.MustLoadResponse()</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> router.Run()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 等待页面稳定</span></span><br><span class=\"line\">\t<span class=\"comment\">// page.MustWaitStable()</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 验证 navigator.webdriver</span></span><br><span class=\"line\">\t_, evalErr := page.Eval(<span class=\"string\">`navigator.webdriver`</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> evalErr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tslog.Error(<span class=\"string\">&quot;验证 navigator.webdriver失败&quot;</span>, <span class=\"string\">&quot;ProxyService&quot;</span>, evalErr)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取当前页面的所有 Cookie</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tcookies := page.MustCookies()</span><br><span class=\"line\">\t\tslog.Info(<span class=\"string\">&quot;自动化拦截页面cookies&quot;</span>, <span class=\"string\">&quot;ProxyService&quot;</span>, cookies)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, c := <span class=\"keyword\">range</span> cookies &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c.Name == <span class=\"string\">&quot;demo_cookies_name&quot;</span> &amp;&amp; c.Value != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    \t\tslog.Info(<span class=\"string\">&quot;已拦截到demo_cookies_name&quot;</span>, <span class=\"string\">&quot;ProxyService&quot;</span>, c.Value)</span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">1000</span> * time.Millisecond) <span class=\"comment\">// 等待1秒</span></span><br><span class=\"line\">\t\t\t\tbrowser.MustClose() <span class=\"comment\">// 关闭浏览器</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"comment\">// 结束当前函数</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">100</span> * time.Millisecond) <span class=\"comment\">// 控制一下获取频率</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"概述浅浅的玩一下github.com/go-rod/rod这个库. 通过这个支持库,可以很方便的打开一个浏览器并且让他访问一个 url,在他访问 url 时你还...","permalink":"/post/2025-07-18-04","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Go","slug":"Go","count":3,"path":"api/categories/Go.json"}],"tags":[{"name":"Go","slug":"Go","count":1,"path":"api/tags/Go.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%A7%8B%E5%AE%9E%E6%93%8D\"><span class=\"toc-text\">开始实操</span></a></li></ol>","author":{"name":"Reverse","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"每一次的突破，都是自我超越的见证。","socials":{"github":"https://github.com/hyhacct","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"NaiveUI的Table表分页配置","uid":"b72299e78af8a95e50e0ce74a5a78e6d","slug":"2025-07-18-03","date":"2025-07-18T13:59:31.000Z","updated":"2025-07-18T10:00:53.309Z","comments":true,"path":"api/articles/2025-07-18-03.json","keywords":null,"cover":null,"text":"因为 NaiveUI 的 DataTable 数据表格组件支持 pagination 参数,所以我一直固定使用这个模板来作为分配配置,而不需要后端来分页 TIP...","permalink":"/post/2025-07-18-03","photos":[],"count_time":{"symbolsCount":942,"symbolsTime":"1 mins."},"categories":[{"name":"Vue.js","slug":"Vue-js","count":3,"path":"api/categories/Vue-js.json"}],"tags":[{"name":"Vue.js NaiveUI","slug":"Vue-js-NaiveUI","count":1,"path":"api/tags/Vue-js-NaiveUI.json"}],"author":{"name":"Reverse","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"每一次的突破，都是自我超越的见证。","socials":{"github":"https://github.com/hyhacct","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Hexo发布到GitHubPage报错404","uid":"8a5374f6cc33ebcdaaad4a3c993161aa","slug":"2025-07-18-02","date":"2025-07-18T10:55:25.000Z","updated":"2025-07-18T10:00:53.309Z","comments":true,"path":"api/articles/2025-07-18-02.json","keywords":null,"cover":null,"text":"Number 1检查静态资源是否已经存在,访问地址: https://github.com/<你的用户名>/<你的仓库>/tree/<静态文件分支> 如果你的工...","permalink":"/post/2025-07-18-02","photos":[],"count_time":{"symbolsCount":360,"symbolsTime":"1 mins."},"categories":[{"name":"GitHub","slug":"GitHub","count":2,"path":"api/categories/GitHub.json"}],"tags":[{"name":"GitHubPage","slug":"GitHubPage","count":1,"path":"api/tags/GitHubPage.json"}],"author":{"name":"Reverse","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"每一次的突破，都是自我超越的见证。","socials":{"github":"https://github.com/hyhacct","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}