{"title":"记录下Vue中的try及Promise异常处理","uid":"2fa26015fca5f58433a95c9ef360f007","slug":"2025-07-19-05","date":"2025-07-19T14:49:21.000Z","updated":"2025-09-23T01:59:03.131Z","comments":true,"path":"api/articles/2025-07-19-05.json","keywords":null,"cover":null,"content":"<p><code>try...catch 结构</code></p>\n<p><code>.then().catch() 结构</code></p>\n<p>这两种结构都是用来处理异常的，但是有些不同，这里做个文档记录下，方便日后 CV</p>\n<h2 id=\"try-结构\"><a href=\"#try-结构\" class=\"headerlink\" title=\"try 结构\"></a>try 结构</h2><ul>\n<li>名称： try-catch 块<br /></li>\n<li>作用： 用于处理同步代码中的异常。当 try 块中的代码执行时，如果发生异常，程序会跳过剩余的 try 块代码，直接执行 catch 块中的代码。<br /><br>示例：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x + y); <span class=\"comment\">// 输出 30</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> z = <span class=\"number\">30</span>; <span class=\"comment\">// z 只在 catch 块内有效</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Finally block executed&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(z); <span class=\"comment\">// 报错，因为 z 仅在 catch 块内有效</span></span><br></pre></td></tr></table></figure>\n\n<p>try 块:</p>\n<ul>\n<li>作为独立的执行上下文。</li>\n<li>在 try 块中声明的变量仅在 try 块内有效。</li>\n</ul>\n<p>catch 块:</p>\n<ul>\n<li>作为 try 块的子作用域。</li>\n<li>在 catch 块中声明的变量仅在 catch 块内有效。</li>\n</ul>\n<p>finally 块:</p>\n<ul>\n<li>作为 try…catch 的子作用域。</li>\n<li>无论 try 或 catch 是否执行，finally 块都会执行。</li>\n<li>在 finally 块中声明的变量也仅在 finally 块内有效。</li>\n</ul>\n<h2 id=\"Promise-结构\"><a href=\"#Promise-结构\" class=\"headerlink\" title=\"Promise 结构\"></a>Promise 结构</h2><ul>\n<li>名称： Promise 的 then 和 catch 方法</li>\n<li>作用： 用于处理异步操作的结果。Promise 是一个代表异步操作最终完成（或失败）的对象，而 then 和 catch 方法则分别用于处理成功和失败的情况。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;/api/data&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> response.<span class=\"title function_\">json</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;成功获取数据:&quot;</span>, data);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;获取数据失败:&quot;</span>, error);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;数据请求完成&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>then():</p>\n<ul>\n<li>当 Promise 对象的状态变为 fulfilled（成功）时，就会调用 then 方法指定的回调函数。</li>\n</ul>\n<p>catch():</p>\n<ul>\n<li>当 Promise 对象的状态变为 rejected（失败）时，就会调用 catch 方法指定的回调函数。</li>\n</ul>\n<p>finally():</p>\n<ul>\n<li>无论 Promise 对象的状态是 fulfilled 还是 rejected，finally 方法指定的回调函数都会执行。</li>\n</ul>\n","feature":false,"text":"try...catch 结构 .then().catch() 结构 这两种结构都是用来处理异常的，但是有些不同，这里做个文档记录下，方便日后 CV try 结构...","permalink":"/post/2025-07-19-05","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Vue.js","slug":"Vue-js","count":6,"path":"api/categories/Vue-js.json"}],"tags":[{"name":"Vue.js 异常处理","slug":"Vue-js-异常处理","count":1,"path":"api/tags/Vue-js-异常处理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#try-%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">try 结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Promise-%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">Promise 结构</span></a></li></ol>","author":{"name":"Reverse","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"每一次的突破，都是自我超越的见证。","socials":{"github":"https://github.com/hyhacct","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"暴破测试工具medusa","uid":"61645ae68e616e7d3c695e23e8e2da8b","slug":"2025-08-02-01","date":"2025-08-02T09:48:27.000Z","updated":"2025-09-23T01:59:03.131Z","comments":true,"path":"api/articles/2025-08-02-01.json","keywords":null,"cover":null,"text":"请注意 WARNING 在此声明一下,medusa是一个非常强大的工具,请在合法授权的情况下使用,本文只做学习使用,请勿用于非法用途,否则造成的一切后果均由使用...","permalink":"/post/2025-08-02-01","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"网络安全","slug":"网络安全","count":2,"path":"api/categories/网络安全.json"}],"tags":[{"name":"网络安全","slug":"网络安全","count":2,"path":"api/tags/网络安全.json"}],"author":{"name":"Reverse","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"每一次的突破，都是自我超越的见证。","socials":{"github":"https://github.com/hyhacct","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"Vue表单规则","uid":"46e84f5dfeda8b84f00edf3fa860badf","slug":"2025-07-19-04","date":"2025-07-19T14:47:17.000Z","updated":"2025-09-23T01:59:03.130Z","comments":true,"path":"api/articles/2025-07-19-04.json","keywords":null,"cover":null,"text":"rules 规则是 Vue.js 中非常重要的属性，它可以对表单的输入进行校验，并给出提示信息, 这里浅浅的记录一下有关 rules 规则的常用用法。 基础用法...","permalink":"/post/2025-07-19-04","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"Vue.js","slug":"Vue-js","count":6,"path":"api/categories/Vue-js.json"}],"tags":[{"name":"Vue.js 表单","slug":"Vue-js-表单","count":1,"path":"api/tags/Vue-js-表单.json"}],"author":{"name":"Reverse","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"每一次的突破，都是自我超越的见证。","socials":{"github":"https://github.com/hyhacct","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}